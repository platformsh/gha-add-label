name: 'Adds a label to a pull request/issue'
description: 'Runs visual regression testing with backstop.js between a production site and PR version of a site'
inputs:
  repo-owner: # owner of the repo
    description: 'Owner/namespace of the target repository'
    required: true
    default: ${{ github.repository_owner }}
  repo-name:
    description: 'Target repository name'
    required: true
    default: ${{ github.event.repository.name }}
  github-token:
    description: 'Github token to the repository so we can work with the github api. Typically GITHUB_TOKEN'
    required: true
  issue-type:
    description: 'Is this an issue or a pull request?'
    required: true
  identifier:
    description: 'The issue/pull request number or URL'
    required: true
  label:
    description: 'The label you want to add to the issue/pull-request. Will be created if it doesn''t exist'
    required: true
  fail-or-report:
    description: 'Should a failure to add a label fail the workflow or be reported as an output? Defaults to fail.'
    required: false
    default: 'fail'
outputs:
  success:
    description: "If adding label was successful or not."
    value: ${{ steps.add-label.outputs.success }}

runs:
  using: "composite"
  steps:
    - name: 'Set up Github token'
      id: setup-gh-token
      shell: bash
      run: echo "GH_TOKEN=${{ inputs.github-token }}" >> $GITHUB_ENV

    # @todo do we need a step to verify there are no problematic characters in the label?

    - name: Determine if we should report add label failure or fail workflow
      shell: bash
      id: fail-or-report
      run: |
        if [[ "${{ inputs.fail-or-report }}" =~ ^[Ff.*] ]]; then
          rof="fail"
        elif [[ "${{ inputs.fail-or-report }}" =~ ^[Rr].* ]]; then
          rof="report"
        else
          echo "::error::I was unable to determine if you want me to fail or the workflow or report back."
          exit 1;
        fi
        
        echo "failreport=${rof}" >> $GITHUB_OUTPUT

    - name: Determine if report or fail
      shell: bash
      id: issue-or-pr
      run: |
        if [[ "${{ inputs.issue-type }}" =~ ^[Ii.*] ]]; then
          type="issue"
        elif [[ "${{ inputs.issue-type }}" =~ ^[Pp].* ]]; then
          type="pr"
        else
          echo "::error::I was unable to determine if the label should be added to a pull request or an issue."
          exit 1;
        fi
        
        echo "type=${type}" >> $GITHUB_OUTPUT

    - name: Determine and set identifier number
      id: set-number
      shell: bash
      run: |
        inputReceived="${{ inputs.identifier }}"
        # if it's not a number, it'll evaluate to false. pipe stderr to dev/null since it'll warn "[: integer expression expected"
        if [ -n "${inputReceived}" ] && [ "${inputReceived}" -eq "${inputReceived}" ] 2>/dev/null; then
          # they most likely gave us a URL so pluck the number off the end.
          if [[ "${inputReceived}" =~ ([0-9]+)[/]?$ ]]; then
            idNumber="${BASH_REMATCH[1]}"
          else
            echo "::error::I was unable to determine the identifier based on what you gave me."
            echo "::debug::inputReceived: ${inputReceived}"
            exit 1
          fi
        else
        # we have a pr number so save it as-is
          idNumber="${inputReceived}"
        fi
        
        echo "identifier-number=${idNumber}" >> $GITHUB_OUTPUT

    - name: Verify Issue/PR number is valid
      shell: bash
      id: verify-number-valid
      run: |
        type="${{ steps.issue-or-pr.outputs.type }}"
        identifier="${{ steps.set-number.outputs.identifier-number }}"
        # @todo should we pipe stderr on the gh call to /dev/null?
        if [[ "${identifier}" != $(gh ${type} view ${identifier} -R ${{ inputs.repo-owner }}/${{ inputs.repo-name }} --json number -q '.number') ]]; then
          echo "::error::The identifier number ${identifier} does not appear to be a valid ${type}"
          exit 1
        else
          # set a continue
          echo "continue=yes" >> $GITHUB_OUTPUT
        fi

    - name: Verify label exists
      if: steps.verify-number-valid.outputs.continue == 'yes'
      shell: bash
      run: |
        # the gh cli doesn't give us a `label view <label>` command so we have to work around it and call the endpoint
        # directly. 
        if [[ "${{ inputs.label }}" != $(gh api "repos/${{ inputs.repo-owner }}/${{ inputs.repo-name }}/labels/${{ inputs.label }}" -q '.name') ]]; then
          echo "Label ${{ inputs.label }} doesn't exist so I need to create it."
          gh label create "${{ inputs.label }}" -R "${{ inputs.repo-owner }}/${{ inputs.repo-name }}"
        else
          echo "Label ${{ inputs.label }} already exists so no need to create it."
        fi

    - name: Add label to issue/pull request
      id: add-label
      shell: bash
      if: steps.verify-number-valid.outputs.continue == 'yes'
      run: |
        type="${{ steps.issue-or-pr.outputs.type }}"
        number=${{ steps.set-number.outputs.identifier-number }}
        
        suppress=$(gh ${type} edit ${number} --add-label "${{ inputs.label }}" -R "${{ inputs.repo-owner }}/${{ inputs.repo-name }}" 2>/dev/null)
        
        if [ $? = 0 ]; then
          report="true"
        else
          report="false"
          if [[ "fail" = "${{ steps.fail-or-report.outputs.failreport }}" ]]; then
            echo "::error::Adding label ${{ inputs.label }} to ${type} ${number} failed!"
            exit 1
          fi
        fi
        
        echo "success=${report}" >> $GITHUB_OUTPUT

        
